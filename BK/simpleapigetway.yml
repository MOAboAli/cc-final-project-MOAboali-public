AWSTemplateFormatVersion: "2010-09-09"
Description: Create a Lambda function with Python for S3 and DynamoDB operations

Resources:
  # IAM Role for Lambda Function
  AboaliLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AboaliLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  loginLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64 # or arm64 based on your needs
      Code:
        ZipFile: |
          import json
          import boto3
          from botocore.exceptions import ClientError

          # Initialize the DynamoDB client
          dynamodb = boto3.client('dynamodb', region_name='us-east-1')
          DYNAMODB_TABLE_NAME = "cc-finalproject-users"

          def lambda_handler(event, context):
            try:
                # Parse the incoming event body
                body = json.loads(event['body'])
                email = body['email']
                password = body['password']

                # Retrieve the item from DynamoDB
                response = dynamodb.get_item(
                    TableName=DYNAMODB_TABLE_NAME,
                    Key={
                        'email': {'S': email}
                    }
                )

                # Check if the item exists
                if 'Item' not in response:
                    raise Exception("This Email is not found.")

                # Check if the password matches
                if response['Item']['password']['S'] != password:
                    raise Exception("This password does not match.")

                # Return the response with the item
                return {
                    'statusCode': 200,
                    'headers': {
                        'Access-Control-Allow-Origin': '*',
                        'Access-Control-Allow-Methods': 'POST',
                        'Access-Control-Allow-Headers': 'Content-Type',
                    },
                    'body': json.dumps({'Item': response['Item']}),
                }

            except ClientError as e:
              print("Error:", e)
              return {
                  'statusCode': 500,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Methods': 'POST',
                      'Access-Control-Allow-Headers': 'Content-Type',
                  },
                  'body': json.dumps({'error': str(e)}),
              }
            except Exception as e:
              print("Error:", e)
              return {
                  'statusCode': 500,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Methods': 'POST',
                      'Access-Control-Allow-Headers': 'Content-Type',
                  },
                  'body': json.dumps({'error': str(e)}),
              }
      Description: "Aboali Lambda Fuction"
      FunctionName: loginLambdaFunction
      Handler: index.lambda_handler
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt AboaliLambdaExecutionRole.Arn
      Runtime: python3.9 # Use the appropriate Python version
      Timeout: 3

  AboaliApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AboaliApi
      Description: API Gateway for login Lambda function
  # Resource for the API
  LoginApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt AboaliApiGateway.RootResourceId
      PathPart: login
      RestApiId: !Ref AboaliApiGateway
  # POST Method for the Resource
  LoginApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref LoginApiResource
      RestApiId: !Ref AboaliApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${loginLambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"

  LoginApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !Ref LoginApiResource
      RestApiId: !Ref AboaliApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"

  LoginApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt loginLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AboaliApiGateway}/*/POST/login"

  AboaliApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref AboaliApiGateway
      StageName: dev
    DependsOn:
      - LoginApiMethod
      - LoginApiOptionsMethod # Ensure OPTIONS method is deployed

